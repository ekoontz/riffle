<?xml version="1.0"?>

<!--
  ~ Copyright (c) 2010 Concurrent, Inc. All Rights Reserved.
  ~
  ~ Project and contact information: http://www.concurrentinc.com/
  -->

<project name="riffle" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <dirname property="riffle.basedir" file="${ant.file.riffle}"/>

  <property name="ivy.dir" location="ivy" />
  <loadproperties srcfile="${ivy.dir}/libraries.properties"/>
  <property name="mvnrepo" value="http://repo2.maven.org/maven2"/>
  <property name="ivy.jar" location="${ivy.dir}/ivy-${ivy.version}.jar"/>
  <property name="ivy_repo_url" 
    value="${mvnrepo}/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>

  <property name="build.number" value="dev"/>
  <property file="${user.home}/build.properties"/>
  <property file="${riffle.basedir}/version.properties"/>
  <property file="${riffle.basedir}/build.properties"/>

  <property name="riffle.release.version" value="x.y.z"/>

  <property name="javac.debug" value="true"/>
  <property name="test.haltonerror" value="true"/>

  <property name="src" location="${riffle.basedir}/src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>

  <property name="build" location="${riffle.basedir}/build/"/>
  <property name="build.classes" location="${build}"/>
  <property name="build.java" location="${build.classes}/java"/>
  <property name="build.test" location="${build.classes}/test"/>

  <property name="test.results" location="${build}/testresults"/>
  <property name="test.showoutput" value="no"/>

  <property name="lib" location="${riffle.basedir}/lib"/>
  <property name="lib.test" location="${lib}/test"/>
  <property name="dist" location="${riffle.basedir}/dist"/>
  <property name="javadoc" location="${riffle.basedir}/javadoc"/>
  <property name="log" location="${riffle.basedir}/log"/>

  <property name="version.riffle" value="${riffle.release.version}-${build.number}"/>

  <property name="jar.riffle" value="riffle-${version.riffle}.jar"/>
  <property name="jar.riffle-test" value="riffle-test-${version.riffle}.jar"/>
  <property name="jar.riffle-src" value="riffle-src-${version.riffle}.jar"/>

  <property name="tar.riffle.prefix" value="riffle-${version.riffle}"/>
  <property name="tar.riffle" value="${tar.riffle.prefix}.tgz"/>

  <path id="build.class.path">
    <pathelement location="${build.java}"/>
    <pathelement location="${build.test}"/>
  </path>

  <path id="jars.class.path">
    <fileset dir="${build}" erroronmissingdir="false">
      <include name="riffle-*.jar"/>
      <include name="riffle-test-*.jar"/>
    </fileset>

    <fileset dir="${basedir}" erroronmissingdir="false">
      <include name="riffle-*.jar"/>
      <include name="riffle-test-*.jar"/>
    </fileset>
  </path>

  <path id="deps.class.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${lib.test}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="project.class.path">
    <path refid="build.class.path"/>
    <path refid="deps.class.path"/>
  </path>

  <path id="package.class.path">
    <path refid="jars.class.path"/>
    <path refid="deps.class.path"/>
  </path>

  <path id="project.src.path">
    <pathelement location="${src.java}"/>
    <pathelement location="${src.test}"/>
  </path>

  <path id="javadoc.src.path">
    <pathelement location="${src.java}"/>
  </path>

  <!-- sets up environment -->
  <target name="init">
    <echo message="initializing riffle environment..."/>

    <mkdir dir="${lib.test}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${test.results}"/>

    <property name="CLASSPATH" refid="project.class.path"/>
    <!--<echo message="${CLASSPATH}"/>-->
  </target>

  <target name="compile" depends="init">
    <echo message="building riffle..."/>

    <javac srcdir="${src.java}" destdir="${build.java}" verbose="off" debug="${javac.debug}" includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.java}/riffle" file="${riffle.basedir}/version.properties"/>
    <echo message="build.number=${build.number}" file="${build.java}/riffle/build.number.properties"/>

    <copy todir="${build.java}">
      <fileset dir="${src.java}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <javac srcdir="${src.test}" destdir="${build.test}" verbose="off" debug="${javac.debug}" includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.test}">
      <fileset dir="${src.test}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="javadoc" depends="init">
    <echo message="creating riffle javadoc..."/>
    <delete dir="${javadoc}"/>
    <mkdir dir="${javadoc}"/>

    <javadoc sourcepathref="javadoc.src.path"
             destdir="${javadoc}"
             packagenames="riffle.*"
             windowtitle="riffle">
      <link href="http://java.sun.com/javase/6/docs/api/"/>
      <bottom><![CDATA[<i>Copyright &#169; 2010 Concurrent, Inc. All Rights Reserved.</i>]]></bottom>
    </javadoc>

  </target>

  <!-- runs JUnit tests -->
  <target name="test" depends="init, compile">
    <echo message="running all riffle tests..."/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.build.data" value="data"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="project.class.path"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <test name="${testcase}" todir="${test.results}" if="testcase" haltonfailure="${test.haltonerror}"/>
      <batchtest todir="${test.results}" haltonfailure="${test.haltonerror}" unless="testcase">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <target name="run-test-package">
    <echo message="running all packaged riffle tests..."/>

    <mkdir dir="package-tests"/>

    <untar src="${tar.riffle}" compression="gzip" dest="package-tests"/>

    <!-- hack to support data files in test packages -->
    <unzip src="package-tests/${tar.riffle.prefix}/${jar.riffle-test}"
           dest="package-tests/${tar.riffle.prefix}/build/test">
      <patternset>
        <include name="data/**"/>
      </patternset>
    </unzip>

    <ant inheritAll="false" antfile="package-tests/${tar.riffle.prefix}/build.xml"
         target="test-package">
      <property name="hadoop.home" value="${hadoop.home}"/>
    </ant>

  </target>

  <target name="test-package">
    <echo message="running all packaged riffle tests..."/>

    <mkdir dir="tests"/>
    <mkdir dir="tests/results"/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.build.data" value="tests/data"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="package.class.path"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <test name="${testcase}" todir="${test.results}" if="testcase" haltonfailure="${test.haltonerror}"/>
      <batchtest todir="tests/results" haltonfailure="${test.haltonerror}" unless="testcase">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <!-- cleans up build artifacts -->
  <target name="clean">
    <echo message="cleaning riffle..."/>
    <delete dir="${build}"/>
    <delete dir="${javadoc}"/>
  </target>

  <!-- removes build -->
  <target name="nuke">
    <echo message="nuking riffle..."/>
    <delete dir="${build}"/>
    <delete dir="${javadoc}"/>
    <delete dir="${dist}"/>
    <delete dir="${log}"/>
    <delete dir="package-tests"/>
    <delete dir="tests"/>

    <delete>
      <fileset dir="." includes="riffle*.tgz"/>
      <fileset dir="." includes="TEST-*"/>
      <fileset dir="." includes="junit*.properties"/>
      <fileset dir="." includes="**/.DS_Store"/>
    </delete>

  </target>

  <!-- jar build -->
  <target name="jar" depends="compile">

    <echo message="jarring riffle..."/>
    <delete file="${build}/${jar.riffle}"/>
    <delete file="${build}/${jar.riffle-test}"/>
    <delete dir="${build.java}/lib"/>

    <manifest file="${build}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <!--<attribute name="Main-Class" value="package.Main"/>-->
    </manifest>

    <jar jarfile="${build}/${jar.riffle}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.java}"/>
    </jar>

    <jar jarfile="${build}/${jar.riffle-test}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${build.test}">
        <include name="riffle/**"/>
      </fileset>
    </jar>

    <jar jarfile="${build}/${jar.riffle-src}" manifest="${build}/MANIFEST.MF" compress="yes">
      <fileset dir="${src.java}"/>
      <fileset dir="${src.test}"/>
    </jar>

  </target>

  <target name="dist" depends="jar,javadoc">
    <echo message="creating version: ${version.riffle}"/>
    <mkdir dir="${dist}"/>

    <echo message="build.number=${build.number}" file="${dist}/build.number.properties"/>

    <copy todir="${dist}">

      <fileset dir=".">
        <exclude name="build.properties"/>
        <exclude name="parent-build.xml"/>

        <exclude name=".git*/**"/>
        <exclude name="build/**"/>
        <exclude name="dist/**"/>
        <exclude name="tests/**"/>
        <exclude name="package-tests/**"/>
        <exclude name="www/**"/>
        <exclude name="log/**"/>

        <exclude name="**/CVS/**"/>
        <exclude name="**/*.tgz"/>
        <exclude name="TEST-*"/>
        <exclude name="**/.DS_Store"/>
      </fileset>

    </copy>

    <copy file="${build}/${jar.riffle}" todir="${dist}"/>
    <copy file="${build}/${jar.riffle-test}" todir="${dist}"/>

  </target>

  <target name="package" depends="nuke,dist">
    <tar destfile="${tar.riffle}"
         compression="gzip" longfile="gnu">
      <tarfileset dir="dist/" prefix="${tar.riffle.prefix}">
        <include name="**/**"/>
      </tarfileset>
    </tar>
  </target>

  <target name="push-package" unless="${package.remote.path}">
    <property name="package.remote.port" value="22"/>
    <scp file="${tar.riffle}" todir="${package.remote.path}" keyfile="${package.remote.keyfile}"
         passphrase="" port="${package.remote.port}" trust="true"/>
  </target>


  <target name="ivy-download" description="To download ivy" unless="offline">
    <get src="${ivy_repo_url}" dest="${ivy.jar}" usetimestamp="true"/>
  </target>

  <target name="ivy-init-dirs">
    <mkdir dir="${build.ivy.dir}" />
    <mkdir dir="${build.ivy.lib.dir}" />
    <mkdir dir="${build.ivy.report.dir}" />
  </target>

  <target name="ivy-probe-antlib" >
    <condition property="ivy.found">
      <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
    </condition>
  </target>

  <!--
  To avoid Ivy leaking things across big projects, always load Ivy in the same classloader.
  Also note how we skip loading Ivy if it is already there, just to make sure all is well.
  -->
  <target name="ivy-init-antlib" depends="ivy-download,ivy-init-dirs,ivy-probe-antlib" unless="ivy.found">
    <typedef uri="antlib:org.apache.ivy.ant" onerror="fail"
      loaderRef="ivyLoader">
      <classpath>
        <pathelement location="${ivy.jar}"/>
      </classpath>
    </typedef>
    <fail >
      <condition >
        <not>
          <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
        </not>
      </condition>
      You need Apache Ivy 2.0 or later from http://ant.apache.org/
      It could not be loaded from ${ivy_repo_url}
    </fail>
  </target>

  <target name="retrieve" depends="ivy-init-antlib">
    <ivy:retrieve conf="test" pattern="${lib}/[conf]/[artifact]-[revision].[ext]" sync="true"/>
  </target>

  <target name="publish" depends="clean,jar">

    <ivy:resolve file="ivy.xml"/>

    <ivy:makepom ivyfile="ivy.xml" pomfile="${build}/riffle-${version.riffle}.pom"/>

    <scp todir="repo@conjars.org:" keyfile="${repo.keyfile}" passphrase="" trust="true">
      <fileset dir="${build}">
        <include name="riffle-${version.riffle}.*"/>
      </fileset>
    </scp>

  </target>

</project>
